{"name":"SharpNative","tagline":"A C# to Native Code (C++, D etc...) Transpiler based on Microsoft Roslyn","body":"What is SharpNative ?\r\n===================\r\n\r\nSharpNative is a tool that generates **Native Code** (D, Soon C++11, Java and Swift) from **C#**.\r\n\r\nThe idea is to maximize the cross-platform capabilities of C# without being tied to any vendor\r\nor platform. The Emphasis here is on Performance and Readability of the generated D Code. Comments are preserved as well.\r\n\r\n---\r\nExample of Generated Code\r\n\r\nC#:\r\n\r\n ```c#\r\nusing System;\r\n\r\nclass Primes\r\n{\r\n \tpublic static void Main()\r\n    {\r\n        var len = 1000000; // This is a comment\r\n        var primes = AddPrimes(len);\r\n        Console.Write(primes);\r\n    }\r\n\r\n    private static int AddPrimes(int len)\r\n    {\r\n        var primes = 0;\r\n        for (var i = 2; i < len; i++)\r\n        {\r\n            if (i%2 == 0)\r\n                continue;\r\n            var isPrime = true;\r\n            for (var j = 2; j*j <= i; j++)\r\n            {\r\n                if (i%j == 0)\r\n                {\r\n                    isPrime = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (isPrime)\r\n                primes++;\r\n        }\r\n        return primes;\r\n    }\r\n    \r\n}\r\n```\r\nD:\r\n\r\n```c++\r\nmodule CsRoot.Primes;\r\nimport System.Namespace;\r\nimport CsRoot.Namespace;\r\n\r\nclass Primes : NObject\r\n{\r\n\r\n    public static void Main()\r\n    {\r\n      int len = 1000000;\r\n      // This is a comment\r\n      int primes = AddPrimes(len);\r\n      Console.Write(primes);\r\n    }\r\n\r\n    final static int AddPrimes(int len)\r\n    {\r\n      int primes = 0;\r\n      \r\n      for (int i = 2;i<len;i++)\r\n      {\r\n        if(i%2==0)\r\n        {\r\n          continue;\r\n        }\r\n        bool isPrime = true;\r\n        \r\n        for (int j = 2;j*j<=i;j++)\r\n        {\r\n          if(i%j==0)\r\n          {\r\n            isPrime=false;\r\n            break;\r\n          }\r\n        }\r\n        if(isPrime)\r\n        {\r\n          primes++;\r\n        }\r\n      }\r\n      return primes;\r\n    }\r\n\r\n  public override String ToString()\r\n  {\r\n    return GetType().FullName;\r\n  }\r\n\r\n  public override Type GetType()\r\n  {\r\n    return __TypeOf!(typeof(this));\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n###**Supported Output Languages**\r\nThe Compiler in its current state only supports D as the output language. (This is due to DMD being an extremely fast compiler, so testing features is fun)\r\n\r\n---\r\n\r\n###**Performance** -- *These are very unscientific*\r\n\r\nThe following are tests taken from CrossNet (one of the first C# to Native compiler efforts)\r\n**Machine:**\r\n-- Macbook Pro Retina (Mid 2012)\r\n-- 2.6Ghz Intel Core i7\r\n-- 16GB  1600 MHz DDR3\r\nSome benchmarks on my Parallels Windows 8 VM: (3GB Ram, 3 Cores) using DMD  with options  `-inline -release -m64 -O`\r\nand .Net in release mode\r\n\r\n|Type Of Test | C# Time (ms) |     D Time (ms)   |  Speed Ratio (C#/D) |\r\n|-------------|:----------:|------:|\r\n|NSieveTest| 18859  |  5450 | 3.46x |\r\n|MatrixTest(MultiDimensional)| 12359  |    22606   |   0.56x |\r\n|MatrixTest(Jagged)| 10156  | 2580 |    3.98x |\r\n|GC Test| 10657   | 57288 |    0.19x |\r\n|Unsafe Test| 32375    | 4752 |    6.81x |\r\n|HeapSort Test| 8671     | 3906 |    2.21x |\r\n|Average |      |  |    **2.87x** |\r\nDue to the produced binaries being native and better optimizations in the DMD, the generated binaries are generally much faster than their C# counterparts. Except when Garbage Collection is concerned, the D GC is much slower than that of .Net (Maybe we can port it to D). Also the current multidimensional array implementation seems lacking in performance.\r\n\r\n----------\r\n\r\n###**Documentation** \r\nUnfortunately this is all the documentation the transpiler has at the moment.\r\n\r\n###**Requirements -- Testing** \r\n-- Microsoft .Net 4.0 / Mono 3.6 and above.\r\n-- Windows 7 or Later ( The CLI Interface works on Linux and OSX)\r\n-- A Working D Installation  (LDC,DMD or GDC) \r\n\r\n###**Requirements -- Development** \r\nAll requirements mentioned above and:\r\n-- Visual Studio 2013 or above\r\n-- Visual D \r\n\r\n###**Usage**\r\nIf you are using the GUI interface(windows) note that DMD should be installed in `\"C:\\\\D\\\\dmd2\\\\windows\\\\bin\\\\\"` \r\nFor the CLI interface the driver can be invoked in the following manner:\r\n\r\n    mono ./SharpNative.exe /compiler:pathtodcompiler /dcorlib:/**pathtodcorlib** /source:\"pathtosourcefile\" /outputtype:exe /dstdlib:pathtophobos /compileroptions:\"compileroptions\"\r\n\r\n**where**:\r\n-- **pathtodcompiler** is the path to a d compiler e.g. `/usr/local/bin/ldc` on mac osx\r\n-- **pathtodcorlib** is the path to the included basic corlib e.g. `/Projects/SharpNative/DCorlib`\r\n-- **pathtosourcefile** is the path to the test source file in C#\r\n--**pathtophobos** is the location of phobos in your installation e.g. `/usr/local/Cellar/ldc/0.15.0/include/d`\r\n--**compileroptions** are the compiler options to pass to dmd/ldc/gdc e.g. `-inline -release -m64 -O5 -oq`\r\n\r\n\r\nFeature List (Incomplete):\r\n\t\r\n-\tWhat works: Moved to Dlang … c++ was a headache\r\n-\tBasic PInvoke\r\n-\tArrays including initializers\r\n-\tFields/ Properties/Methods with correct hiding semantics\r\n-\tProperties are better implemented\r\n-\tString\r\n-\tInt/Double/Bool\r\n-\tClasses and Polymorphism … we follow C# model\r\n-\tSome benchmarks - basic linpack, fannkuch, nbody\r\n-\tModules/Namespaces\r\n-\tEnum - no enum.Parse support yet though\r\n-\tIterators are as .Net use enumerators etc … switching arrays to use simple for loop though for performance improvement\r\n-\tConstructors/Overloads/Base Class calls\r\n-\tStatic Variables/Members/Properties\r\n-\tBasic System.Math, more implementations required though\r\n-\tExtension Methods\r\n-\tOperator Overloading\r\n-\tIndexers\r\n-\tAnonymous Classes\r\n-\tGenerics … All current test cases work\r\n-\tBoxed structs and interface casting for them\r\n-\tInner Classes in the form of OuterClass_InnerClass\r\n-\tStatic Constructors\r\n-\tExplicit Interfaces … current fix is not so pretty though … i.e. IEnumerator.MoveNext becomes IEnumerator.IEnumerator_MoveNext (this allows implementing methods with same name, differently)\r\n-\tImplicit and Explicit Cast Operators\r\n-\tString switch … dlang supports this natively :)\r\n-\tString.Format .. though implementation is very basic\r\n-\tC# multi dimensional arrays work correctly (even with multi dim syntax :) )… mostly … look at multi test from CrossNet\r\n-\tDelegates work including multicast (Native delegates through P/Invoke work too)\r\n-\tEvents work as expected … though a bit slower than C#(mono)\r\n\r\nWhat Doesn’t Work: (Also Incomplete)\r\n-\tObject initializers in lambdas/loops/fields do very weird things (tm), we need to wrap them in functions (lambda captures)\r\n-\tRight now compiler does not do any optimizations like final, in, out @pure etc …\r\n-\tUnboxing to Wrong Type doesn't throw exceptions\r\n-\tYield - Though an implementation using fibers exists\r\n-\tAsync/Await - Working on an implementation\r\n-\tQuery Expression Syntax for LINQ and general Expressions\r\n-\tStructs FieldLayout implementation is currently wrong ... to mimic C# a new design is needed.\r\n-\tLots of other minor issues not yet documented.\r\n\r\n  [1]: http://math.stackexchange.com/\r\n  [2]: http://daringfireball.net/projects/markdown/syntax \"Markdown\"\r\n  [3]: https://github.com/jmcmanus/pagedown-extra \"Pagedown Extra\"\r\n  [4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\r\n  [5]: https://code.google.com/p/google-code-prettify/\r\n  [6]: http://highlightjs.org/\r\n  [7]: http://bramp.github.io/js-sequence-diagrams/\r\n  [8]: http://adrai.github.io/flowchart.js/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}