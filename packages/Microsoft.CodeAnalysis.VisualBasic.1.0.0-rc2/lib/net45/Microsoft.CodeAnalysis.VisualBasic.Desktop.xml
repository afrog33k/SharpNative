<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.CodeAnalysis.VisualBasic.Desktop
</name>
</assembly>
<members>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments">
 <summary>
 The CommandLineArguments class provides members to Set and Get Visual Basic compilation and parse options.
 </summary>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments.CompilationOptions">
 <summary>
 Set and Get the Visual Basic compilation options.
 </summary>
 <returns>The currently set Visual Basic compilation options.</returns>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments.ParseOptions">
 <summary>
 Set and Get  the Visual Basic parse parse options.
 </summary>
 <returns>The currently set Visual Basic parse options.</returns>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments.ParseOptionsCore">
 <summary>
 Gets the core Parse options.
 </summary>
 <returns>The currently set core parse options.</returns>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments.CompilationOptionsCore">
 <summary>
 Gets the core compilation options.
 </summary>
 <returns>The currently set core compilation options.</returns>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser">
 <summary>
 The VisualBasicCommandLineParser class contains members used to perform various Visual Basic command line parsing operations.
 </summary>
</member>
<member name="F:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.Default">
 <summary>
 Gets the current command line parser.
 </summary>
</member>
<member name="F:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.Interactive">
 <summary>
 Gets the current interactive command line parser.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.#ctor(System.Boolean)">
 <summary>
 Creates a new command line parser.
 </summary>
 <param name="isInteractive">An optional parameter indicating indicating whether to create a interactive command line parser.</param>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.RegularFileExtension">
 <summary>
 Gets the standard Visual Basic source file extension
 </summary>
 <returns>A string representing the standard Visual Basic source file extension.</returns>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ScriptFileExtension">
 <summary>
 Gets the standard Visual Basic script file extension.
 </summary>
 <returns>A string representing the standard Visual Basic script file extension.</returns>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
 <summary>
 Parses a command line.
 </summary>
 <param name="args">A collection of strings representing the command line arguments.</param>
 <param name="baseDirectory">The base directory used for qualifying file locations.</param>
 <param name="additionalReferencePaths">A string representing additional reference paths.</param>
 <returns>A CommandLineArguments object representing the parsed command line.</returns>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.PublicSymbolsToInternalDefines(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
 <summary>
 Converts a sequence of definitions provided by a caller (public API) into map 
 of definitions used internally.
 </summary>
 <exception cref="T:System.ArgumentException">Invalid value provided.</exception>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.InternalDefinesToPublicSymbols(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.CConst})">
 <summary>
 Converts ImmutableDictionary of definitions used internallyinto IReadOnlyDictionary of definitions 
 returned to a caller (of public API)
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ParseConditionalCompilationSymbols(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
 <summary>
 Parses Conditional Compilations Symbols.   Given the string of conditional compilation symbols from the project system, parse them and merge them with an IReadOnlyDictionary
 ready to be given to the compilation.
 </summary>
 <param name="symbolList">
 The conditional compilation string. This takes the form of a comma delimited list
 of NAME=Value pairs, where Value may be a quoted string or integer.
 </param>
 <param name="diagnostics">A collection of reported diagnostics during parsing of symbolList, can be empty IEnumerable.</param>
 <param name="symbols">A collection representing existing symbols. Symbols parsed from <paramref name="symbolList"/> will be merged with this dictionary. </param>
 <exception cref="T:System.ArgumentException">Invalid value provided.</exception>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ParseConditionalCompilationExpression(System.String,System.Int32)">
 <summary>
 NOTE: implicit line continuation will not be handled here and an error will be generated, 
 but explicit one (like ".... _\r\n ....") should work fine
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ParsePlatform(System.String,System.String,System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostic})">
 <summary>
 Parses the given platform option. Legal strings are "anycpu", "x64", "x86", "itanium", "anycpu32bitpreferred", "arm".
 In case an invalid value was passed, anycpu is returned.
 </summary>
 <param name="value">The value for platform.</param>
 <param name="errors">The error bag.</param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ParseFileAlignment(System.String,System.String,System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostic})">
 <summary>
 Parses the file alignment option.
 In case an invalid value was passed, nothing is returned.
 </summary>
 <param name="name">The name of the option.</param>
 <param name="value">The value for the option.</param>
 <param name="errors">The error bag.</param><returns></returns>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ParseBaseAddress(System.String,System.String,System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostic})">
 <summary>
 Parses the base address option.
 In case an invalid value was passed, nothing is returned.
 </summary>
 <param name="name">The name of the option.</param>
 <param name="value">The value for the option.</param>
 <param name="errors">The error bag.</param><returns></returns>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.ParseWarnings(System.String)">
 <summary>
 Parses the warning option.
 </summary>
 <param name="value">The value for the option.</param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser.GetCompilationAndModuleNames(System.Collections.Generic.List{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.OutputKind,System.Collections.Generic.List{Microsoft.CodeAnalysis.CommandLineSourceFile},System.String,System.String@,System.String@,System.String@)">
 <summary>
 In VB, if the output file name isn't specified explicitly, then it is derived from the name of the
 first input file.
 </summary>
 <remarks>
 http://msdn.microsoft.com/en-us/library/std9609e(v=vs.110)
 Specify the full name and extension of the file to create. If you do not, the .exe file takes 
 its name from the source-code file containing the Sub Main procedure, and the .dll file takes
 its name from the first source-code file.
 
 However, vbc.cpp has: 
 <![CDATA[
   // Calculate the output name and directory
   dwCharCount = GetFullPathName(pszOut ? pszOut : g_strFirstFile, &wszFileName);
 ]]>
 </remarks>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompiler.PrintLogo(System.IO.TextWriter)">
 <summary>
 Print compiler logo
 </summary>
 <param name="consoleOutput"></param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompiler.PrintHelp(System.IO.TextWriter)">
 <summary>
 Print Commandline help message (up to 80 English characters per line)
 </summary>
 <param name="consoleOutput"></param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicFileSystemExtensions.Emit(Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription},System.Threading.CancellationToken)">
 <summary>
 Emit the IL for the compilation into the specified stream.
 </summary>
 <param name="compilation">Compilation.</param>
 <param name="outputPath">Path of the file to which the compilation will be written.</param>
 <param name="pdbPath">
 Path of the file to which the compilation's debug info will be written.
 Also embedded in the output file. <c>Nothing</c> to forego PDB generation.
 </param>
 <param name="xmlDocPath">Path of the file to which the compilation's XML documentation will be written. <c>Nothing</c> to forego XML generation.</param>
 <param name="win32ResourcesPath">Path of the file from which the compilation's Win32 resources will be read (in RES format).  
 Null to indicate that there are none.</param>
 <param name="manifestResources">List of the compilation's managed resources. <c>Nothing</c> to indicate that there are none.</param>
 <param name="cancellationToken">To cancel the emit process.</param>
 <exception cref="T:System.ArgumentNullException">Compilation or path is null.</exception>
 <exception cref="T:System.ArgumentException">Path is empty or invalid.</exception>
 <exception cref="T:System.IO.IOException">An error occurred while reading or writing a file.</exception>
</member>
</members>
</doc>
